import Logger from '@lsk4/log';
import fs from 'fs';
import mic from 'mic';
import Vad from 'node-vad';
import ora from 'ora';

import { isDebug } from '../../config.js';
import { playFinishRecording, playStartRecording } from '../play.js';
import { getRecordingFilename } from './getRecordingFilename.js';

const log = new Logger({
  name: 'recording',
  level: isDebug ? 'trace' : 'error',
});

type RecordOptions = {
  maxDuration?: number;
  silence?: number;
};
/**
 * –ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –∞—É–¥–∏–æ —Å –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ–≥–æ –≤ WAV-—Ñ–∞–π–ª.
 * –§—É–Ω–∫—Ü–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–∞—Ä—É–∂–∏–≤–∞–µ—Ç –ø–∞—É–∑—ã –≤ —Ä–µ—á–∏ –∏ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–∞–ø–∏—Å—å,
 * –∫–æ–≥–¥–∞ –Ω–∞—Å—Ç—É–ø–∞–µ—Ç —Ç–∏—à–∏–Ω–∞ –ø–æ—Å–ª–µ —Ä–µ—á–∏ –∏–ª–∏ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å.
 *
 * @param {RecordOptions} options - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–ø–∏—Å–∏
 * @param {number} options.maxDuration - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–∞–ø–∏—Å–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 10 —Å–µ–∫—É–Ω–¥)
 * @param {number} options.silence - –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç–∏—à–∏–Ω—ã –≤ —Å–µ–∫—É–Ω–¥–∞—Ö, –ø–æ—Å–ª–µ –∫–æ—Ç–æ—Ä–æ–π –∑–∞–ø–∏—Å—å –ø—Ä–µ–∫—Ä–∞—â–∞–µ—Ç—Å—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 2 —Å–µ–∫—É–Ω–¥—ã)
 * @returns {Promise<string>} –ü—É—Ç—å –∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–º—É –∞—É–¥–∏–æ—Ñ–∞–π–ª—É
 */
export async function recording(options: RecordOptions = {}): Promise<string> {
  const { maxDuration = 10, silence = 1 } = options;
  const filename = getRecordingFilename();

  const micInstance = mic({
    rate: '16000', // VAD —Ä–∞–±–æ—Ç–∞–µ—Ç —Å —á–∞—Å—Ç–æ—Ç–æ–π 16kHz
    channels: '1', // VAD —Ç—Ä–µ–±—É–µ—Ç –æ–¥–∏–Ω –∫–∞–Ω–∞–ª
    fileType: 'wav',
    debug: false,
    encoding: 'signed-integer', // –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å VAD
    bitwidth: '16', // VAD —Ç—Ä–µ–±—É–µ—Ç 16-–±–∏—Ç–Ω—ã–π PCM
  });
  const micInputStream = micInstance.getAudioStream();
  const vadInstance = new Vad(Vad.Mode.VERY_AGGRESSIVE);

  let silenceStart: number | null = null;
  let speechDetected = false;
  let recordingTimeout: NodeJS.Timeout | null = null;

  const chunks: Buffer[] = [];

  const maxRecordingTime = setTimeout(() => {
    log.debug('–î–æ—Å—Ç–∏–≥–Ω—É—Ç–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–∞–ø–∏—Å–∏');
    // eslint-disable-next-line @typescript-eslint/no-use-before-define
    stopRecording();
  }, maxDuration * 1000);

  function stopRecording() {
    if (recordingTimeout) {
      clearTimeout(recordingTimeout);
      recordingTimeout = null;
    }
    clearTimeout(maxRecordingTime);

    if (micInstance) {
      micInstance.stop();
      log.debug('–ó–∞–ø–∏—Å—å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞');
    }
  }

  // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–∏—Å, –∫–æ—Ç–æ—Ä—ã–π –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏
  const recordingPromise = new Promise<void>((resolve, reject) => {
    micInputStream.on('data', async (chunk: Buffer) => {
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ —Ñ–∞–π–ª
      chunks.push(chunk);

      // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —á–∞–Ω–∫ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –≥–æ–ª–æ—Å–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º try/catch –≤–º–µ—Å—Ç–æ .then()
      try {
        const result: Vad.Event = await vadInstance.processAudio(chunk, 16000);
        switch (result) {
          case Vad.Event.SILENCE:
            if (speechDetected) {
              // –ï—Å–ª–∏ —É–∂–µ –±—ã–ª–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —Ä–µ—á—å –∏ –Ω–∞—Å—Ç—É–ø–∏–ª–∞ —Ç–∏—à–∏–Ω–∞
              if (silenceStart === null) {
                silenceStart = Date.now();
              } else if (Date.now() - silenceStart > silence * 1000) {
                // –ï—Å–ª–∏ —Ç–∏—à–∏–Ω–∞ –¥–ª–∏—Ç—Å—è –¥–æ–ª—å—à–µ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–ø–∏—Å—å
                log.debug('–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —Ç–∏—à–∏–Ω–∞ –ø–æ—Å–ª–µ —Ä–µ—á–∏, –∑–∞–≤–µ—Ä—à–∞–µ–º –∑–∞–ø–∏—Å—å');
                stopRecording();
              }
            }
            break;
          case Vad.Event.VOICE:
            speechDetected = true;
            silenceStart = null;
            break;
          case Vad.Event.NOISE:
            // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —à—É–º
            break;
          case Vad.Event.ERROR:
            log.warn('VAD –æ–±–Ω–∞—Ä—É–∂–∏–ª –æ—à–∏–±–∫—É –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞—É–¥–∏–æ');
            break;
          default:
            log.warn('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç VAD:', result);
            break;
        }
      } catch (err: unknown) {
        log.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞—É–¥–∏–æ —Å VAD:', err);
      }
    });

    micInputStream.on('error', (err: any) => {
      log.error('Mic input stream error:', err);
      reject(err);
    });

    micInputStream.on('close', () => {
      log.debug('Mic input stream closed');

      // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—Å–µ —Å–æ–±—Ä–∞–Ω–Ω—ã–µ —á–∞–Ω–∫–∏ –≤ —Ñ–∞–π–ª
      const buffer = Buffer.concat(chunks);
      fs.writeFileSync(filename, buffer);

      log.debug('–ó–∞–ø–∏—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤', filename);
      resolve();
    });
  });

  const loading = ora({
    text: 'speak:',
    color: 'yellow',
    spinner: 'dots',
  }).start();
  await playStartRecording();
  log.debug('üéôÔ∏è –ù–∞—á–Ω–∏—Ç–µ –≥–æ–≤–æ—Ä–∏—Ç—å...');
  micInstance.start();
  await recordingPromise;

  log.debug('–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏');
  await playFinishRecording();
  loading.stop();

  return filename;
}
